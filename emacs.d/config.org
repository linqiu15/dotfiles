* basic
#+BEGIN_SRC emacs-lisp :tangle yes
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (setq inhibit-startup-message t)
  (setq inhibit-startup-screen t)
  (setq make-backup-files nil)
  (setq visible-bell t)
  (defalias 'yes-or-no-p 'y-or-n-p)
  (global-linum-mode t)
  (use-package doom-themes
    :config
    (load-theme 'doom-tomorrow-day t))
#+END_SRC
* editors
#+BEGIN_SRC emacs-lisp :tangle yes 
  (use-package which-key
    :config
    (which-key-mode 1))

  (use-package expand-region
    :config
    (global-set-key (kbd "C-=") 'er/expand-region))

  (use-package cnfonts
    :config
    (cnfonts-enable))

  (use-package pyim
    :ensure pyim-basedict
    :config
  
    (setq default-input-method "pyim")

    ;; 金手指设置，可以将光标处的编码，比如：拼音字符串，转换为中文。
    (global-set-key (kbd "M-j") 'pyim-convert-string-at-point)

    ;; 按 "C-<return>" 将光标前的 regexp 转换为可以搜索中文的 regexp.
    (define-key minibuffer-local-map (kbd "C-<return>") 'pyim-cregexp-convert-at-point)

    ;; 我使用全拼
    (pyim-default-scheme 'quanpin)
    ;; (pyim-default-scheme 'wubi)
    ;; (pyim-default-scheme 'cangjie)

    ;; pyim 探针设置
    ;; 设置 pyim 探针设置，这是 pyim 高级功能设置，可以实现 *无痛* 中英文切换 :-)
    ;; 我自己使用的中英文动态切换规则是：
    ;; 1. 光标只有在注释里面时，才可以输入中文。
    ;; 2. 光标前是汉字字符时，才能输入中文。
    ;; 3. 使用 M-j 快捷键，强制将光标前的拼音字符串转换为中文。
    ;; (setq-default pyim-english-input-switch-functions
    ;;               '(pyim-probe-dynamic-english
    ;;                 pyim-probe-isearch-mode
    ;;                 pyim-probe-program-mode
    ;;                 pyim-probe-org-structure-template))

    ;; (setq-default pyim-punctuation-half-width-functions
    ;;               '(pyim-probe-punctuation-line-beginning
    ;;                 pyim-probe-punctuation-after-punctuation))

    ;; 开启代码搜索中文功能（比如拼音，五笔码等）
    (pyim-isearch-mode 1)

    ;; 显示5个候选词。
    (setq pyim-page-length 5)

    ;; Basedict
    (require 'pyim-basedict)
    (pyim-basedict-enable))
#+END_SRC
* evil
#+BEGIN_SRC emacs-lisp :tangle yes 
  (use-package evil
    :config
    (evil-define-key 'normal org-mode-map (kbd "<tab>") #'org-cycle)
    (evil-mode t))

  (use-package evil-commentary
    :config
    (evil-commentary-mode))
#+END_SRC
* ivy
#+BEGIN_SRC emacs-lisp :tangle yes 
  (use-package ivy
    :ensure swiper
    :ensure counsel
    :config
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq enable-recursive-minibuffers t)
    (global-set-key "\C-s" 'swiper)
    (global-set-key (kbd "M-x") 'counsel-M-x)
    (global-set-key (kbd "C-x C-f") 'counsel-find-file)
    (global-set-key (kbd "C-x C-r") 'counsel-recentf)
    (global-set-key (kbd "C-x b") 'counsel-switch-buffer)
    (global-set-key (kbd "C-x C-b") 'counsel-bookmark)
    (global-set-key (kbd "C-x C-t") 'counsel-load-theme)
    )
#+END_SRC
* programming
#+BEGIN_SRC emacs-lisp :tangle yes 
  (use-package company
    :config
    (global-company-mode t))

  (use-package flycheck
    :ensure t
    )

  (use-package yasnippet
    :config
    (use-package yasnippet-snippets)
    (yas-global-mode 1))

  (use-package smartparens
    :config
    (smartparens-global-mode)
    )

  (use-package highlight-parentheses
    :config
    (global-highlight-parentheses-mode t))

  (use-package magit)

  ;; (use-package hungry-delete
  ;;   :config
  ;;   (global-hungry-delete-mode))

  (use-package exec-path-from-shell
    :config
    (when (memq window-system '(mac ns x))
      (exec-path-from-shell-initialize)))

  (use-package projectile
    :config
    (projectile-mode +1)
    (define-key projectile-mode-map (kbd "M-p") 'projectile-command-map))

  (use-package shell-pop
    :config
    (custom-set-variables
     '(shell-pop-shell-type (quote ("ansi-term" "*ansi-term*" (lambda nil (ansi-term shell-pop-term-shell)))))
     '(shell-pop-term-shell "/usr/bin/zsh")
     '(shell-pop-universal-key "C-c t")
     '(shell-pop-window-size 30)
     '(shell-pop-full-span t)
     '(shell-pop-window-position "bottom")
     '(shell-pop-autocd-to-working-dir t)
     '(shell-pop-restore-window-configuration t)
     '(shell-pop-cleanup-buffer-at-process-exit t)))


    (use-package lsp-mode
      :init
      (setq lsp-prefer-flymake nil)
      (setq lsp-keymap-prefix "C-c l")
      :config
      (add-hook 'julia-mode-hook #'lsp-mode))
    (use-package lsp-ui :commands lsp-ui-mode)
    ;; if you are ivy user
    (use-package lsp-ivy :commands lsp-ivy-workspace-symbol)
#+END_SRC
* lang
** c++
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package irony
    :config
    (add-hook 'c++-mode-hook 'irony-mode)
    (add-hook 'c-mode-hook 'irony-mode)
    (add-hook 'c++-mode-hook 'flycheck-mode)
    (add-hook 'c-mode-hook 'flycheck-mode)
    (add-hook 'objc-mode-hook 'irony-mode)

    (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options))

  (use-package clang-format+
    :config
    (add-hook 'c-mode-common-hook #'clang-format+-mode))
#+END_SRC
** python
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package elpy
    :ensure t
    :defer t
    :init
    (advice-add 'python-mode :before 'elpy-enable)
    :config
    (add-hook 'python-mode 'flycheck-mode)
    (setq python-shell-interpreter "python3"
          python-shell-interpreter-args "-i")
    (setq elpy-rpc-python-command "python3"))


  (use-package yapfify
    :config
    (add-hook 'python-mode-hook 'yapf-mode))
#+END_SRC
** latex
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package tex
    :ensure auctex)

  (add-hook 'LaTeX-mode-hook 
            (lambda()
              (add-to-list 'TeX-command-list '("XeLaTeX" "%`xelatex%(mode)%' %t" TeX-run-TeX nil t))
              (setq TeX-command-default "XeLaTeX")))

  (add-hook 'LaTeX-mode-hook 
            (lambda()
              (add-to-list 'TeX-command-list '("LuaLaTex" "%`lualatex%(mode)%' %t" TeX-run-TeX nil t))
              ))
#+END_SRC
** julia
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package julia-mode
    :ensure flycheck-julia
    :config
    ;; tell flycheck about the julia linter
    (flycheck-julia-setup)
    );; Load ob-ess-julia and dependencies

  (use-package julia-repl
    :config
    (add-hook 'julia-mode-hook 'julia-repl-mode))

  (use-package lsp-julia
    :config
    (setq lsp-julia-default-environment "~/.julia/environments/v1.7"))
#+END_SRC
** misc
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package markdown-mode
    :ensure t
    :commands (markdown-mode gfm-mode)
    :mode (("README\\.md\\'" . gfm-mode)
           ("\\.md\\'" . markdown-mode)
           ("\\.markdown\\'" . markdown-mode))
    )

  (use-package yaml-mode
    :config
    (add-to-list 'auto-mode-alist '("\\.yml\\'" . yaml-mode))
    (add-hook 'yaml-mode-hook
              '(lambda ()
                 (define-key yaml-mode-map "\C-m" 'newline-and-indent)))
    )
#+END_SRC
* org
** basic
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package org-superstar
    :config
    (add-hook 'org-mode-hook (lambda () (org-superstar-mode 1))))

  (with-eval-after-load 'org       
    (setq org-startup-indented t) ; Enable `org-indent-mode' by default
    (add-hook 'org-mode-hook #'visual-line-mode))

  (setq org-babel-python-command "python3")
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . nil)
     (python . t)))
#+END_SRC
** exporting
#+BEGIN_SRC emacs-lisp :tangle yes 
  (use-package org-ref
    :config
    (setq org-latex-pdf-process 
          '("xelatex -shell-escape -interaction nonstopmode %f"
            "xelatex -shell-escape -interaction nonstopmode %f")) ;; for multiple passes
    ;; (setq org-latex-pdf-process
    ;;       '("xelatex -interaction nonstopmode -output-directory %o %f"
    ;;         "bibtex %b"
    ;;         "xelatex -interaction nonstopmode -output-directory %o %f"
    ;;         "xelatex -interaction nonstopmode -output-directory %o %f"))

    ;; (setq org-latex-listings 'minted
    ;;       org-latex-packages-alist '(("" "minted")))

    ;; (setq org-latex-pdf-process
    ;;       '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
    ;;         "bibtex %b"
    ;;         "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
    ;;         "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))
    (define-key org-mode-map (kbd "C-c ]") 'org-ref-insert-link)
    )
#+END_SRC
** misc
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package org-re-reveal
    :config
    (setq org-re-reveal-root "file:///home/ql/.emacs.d/misc/reveal.js"))
#+END_SRC
* customization
#+BEGIN_SRC emacs-lisp :tangle yes
  (defun ql/reload-config ()
    (interactive)
    (org-babel-load-file "~/.emacs.d/config.org"))
#+END_SRC
