* basic
#+BEGIN_SRC emacs-lisp :tangle yes
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (setq inhibit-startup-message t)
  (setq inhibit-startup-screen t)
  (setq make-backup-files nil)
  (setq visible-bell t)
  (defalias 'yes-or-no-p 'y-or-n-p)
  (global-linum-mode t)
  (use-package doom-themes
    :config
    (load-theme 'doom-material t))
#+END_SRC
* editors
#+BEGIN_SRC emacs-lisp :tangle yes 
  (use-package which-key
    :config
    (which-key-mode 1))

  (use-package expand-region
    :config
    (global-set-key (kbd "C-=") 'er/expand-region))

  (use-package cnfonts
    :config
    (cnfonts-enable))
#+END_SRC
* evil
#+BEGIN_SRC emacs-lisp :tangle yes 
  (use-package evil
    :config
    (evil-define-key 'normal org-mode-map (kbd "<tab>") #'org-cycle)
    (evil-mode t))

  (use-package evil-commentary
    :config
    (evil-commentary-mode))
#+END_SRC
* ivy
#+BEGIN_SRC emacs-lisp :tangle yes 
  (use-package ivy
    :ensure swiper
    :ensure counsel
    :config
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq enable-recursive-minibuffers t)
    (global-set-key "\C-s" 'swiper)
    (global-set-key (kbd "M-x") 'counsel-M-x)
    (global-set-key (kbd "C-x C-f") 'counsel-find-file)
    (global-set-key (kbd "C-x C-r") 'counsel-recentf)
    (global-set-key (kbd "C-x b") 'counsel-switch-buffer)
    (global-set-key (kbd "C-x C-b") 'counsel-bookmark)
    (global-set-key (kbd "C-x C-t") 'counsel-load-theme)
    )
#+END_SRC
* email
#+begin_src emacs-lisp :tangle yes
  (add-to-list 'load-path "/opt/homebrew/opt/mu/share/emacs/site-lisp/mu/mu4e")
  (use-package org-mime
    :config
    (require 'mu4e)
    (require 'smtpmail)
    (require 'org-mu4e)

    ;; 配置 mu4e 作为 MUA 以及基本的邮件信息配置
    (setq mail-user-agent 'mu4e-user-agent)
    (setq user-full-name "Lin Qiu")
    (setq user-mail-address "qiulin@ihep.ac.cn")

    ;; 配置使用 offlieimap 收取邮件
    (setq
     mu4e-get-mail-command "offlineimap"   ;; 使用 offlineimap 获取邮件
     mu4e-update-interval 300)             ;; 每五分钟检查邮件并更新索引 (配置单位：秒)

    ;; 配置默认 smtp 服务以使用 smtpmail mode 发送 Email
    ;; SMTP 服务需要认证，我采用 ~/.authinfo 的方式提供认证信息。
    ;; 有关 SMTP 认证, 参阅 https://www.emacswiki.org/emacs/SmtpAuth
    (setq send-mail-function 'smtpmail-send-it
          message-send-mail-function 'smtpmail-send-it
          smtpmail-auth-credentials "~/.authinfo"
          smtpmail-stream-type  'starttls)

    ;; set default values about mu4e
    (setq
     ;; auto update maildir with isync and index it
     mu4e-update-interval 300
     ;; don't do a full cleanup check
     mu4e-index-cleanup nil
     ;; don't consider up-to-date dirs
     mu4e-index-lazy-check t
     ;; show images in message mode
     mu4e-view-show-images t
     ;; set the default download dir for attachment
     mu4e-attachment-dir "~/Downloads"
     ;; prefer html view
     mu4e-view-prefer-html t
     ;; don't save message to sent messages, gmail/imap takes care of this
     ;; (see the documentation for `mu4e-sent-messages-behavior' if you have
     ;; additional non-gmail addresses and want assign them different
     ;; behavior.)
     mu4e-sent-messages-behavior 'delete
     )

    ;; set default values for sending mails
    (setq
     ;; user agent when send mail
     mail-user-agent 'mu4e-user-agent
     ;; 设置邮件发送方法为 smtpmail
     message-send-mail-function 'smtpmail-send-it
     ;; 根据 from 邮件头使用正确的账户上下文发送 email.
     message-sendmail-envelope-from 'header
     ;; 设置邮箱认证加密方式
     smtpmail-stream-type 'ssl
     ;; don't keep message buffers around
     message-kill-buffer-on-exit t
     )

    ;; some information about me
    (setq
     user-full-name  "Lin Qiu"
     ;; set a mail address list using when reply a message
     mu4e-user-mail-address-list '("qiulin@ihep.ac.cn"
                                   "qiulin15@mails.ucas.ac.cn")
     mu4e-compose-signature
     (concat
      "Best wishes,\n"
      "Lin Qiu")
     )

    ;; 该函数基于当前所在的 maildir 来判定所账户上下文。
    ;; (defun mu4e-message-maildir-matches (msg rx)
    ;;   (when rx
    ;;     (if (listp rx)
    ;;         ;; If rx is a list, try each one for a match
    ;;         (or (mu4e-message-maildir-matches msg (car rx))
    ;;             (mu4e-message-maildir-matches msg (cdr rx)))
    ;;       ;; Not a list, check rx
    ;;       (string-match rx (mu4e-message-field msg :maildir)))))

    ;; 设置 mu4e 上下文
    (setq mu4e-contexts
          `( ,(make-mu4e-context
               :name "IHEP"
               :enter-func (lambda ()
                             (mu4e-message "Entering IHEP context")
                             ;; update index after switch context, otherwise the
                             ;; counting is not updated
                             (mu4e-update-index))
               :leave-func (lambda () (mu4e-message "Leaving IHEP context"))
               ;; we match based on the contact-fields of the message
               :match-func (lambda (msg)
                             (when msg
                               (string-match-p "qiulin@ihep.ac.cn" (mu4e-message-field msg :maildir))))

               :vars '((user-mail-address             . "qiulin@ihep.ac.cn")
                       (mu4e-sent-folder              . "/IHEP/Sent")
                       (mu4e-drafts-folder            . "/IHEP/Drafts")
                       (mu4e-trash-folder             . "/IHEP/Trash")
                       (mu4e-refile-folder            . "/IHEP/Refile")
                       (smtpmail-default-smtp-server  . "mail.ihep.ac.cn")
                       (smtpmail-smtp-server          . "mail.ihep.ac.cn")
                       (smtpmail-smtp-service         . 465)
                       (mu4e-get-mail-command         . "offlineimap")
                       (mu4e-maildir-shortcuts . (("/IHEP/INBOX"   . ?i)
                                                  ("/IHEP/Sent"    . ?s)
                                                  ("/IHEP/Refile"  . ?r)
                                                  ("/IHEP/Trash"   . ?t)
                                                  ("/IHEP/Drafts"  . ?d)))
                       (mu4e-bookmarks . ( ("maildir:/IHEP/INBOX AND flag:unread AND NOT flag:trashed"   "Unread messages"        ?u)
                                           ("maildir:/IHEP/INBOX AND date:today..now"                    "Today's messages"       ?t)
                                           ("maildir:/IHEP/INBOX AND date:7d..now"                       "Last 7 days"            ?w)
                                           ("maildir:/IHEP/INBOX AND date:1d..now"                       "Last 1 days"            ?o)
                                           ("maildir:/IHEP/INBOX"                                        "Inbox"                  ?i)
                                           ("maildir:/IHEP/Sent"                                         "Sent"                   ?s)
                                           ("maildir:/IHEP/Refile"                                       "Refile"                 ?r)
                                           ("maildir:/IHEP/Trash"                                        "Trash"                  ?t)
                                           ("maildir:/IHEP/Drafts"                                       "Drafts"                 ?d)
                                           ("maildir:/IHEP/INBOX AND mime:image/*"                       "Messages with images"   ?p)))
                       ))

             ,(make-mu4e-context
               :name "COREMAIL"
               :enter-func (lambda ()
                             (mu4e-message "Switch to the COREMAIL context")
                             (mu4e-update-index))
               :match-func (lambda (msg)
                             (when msg
                               (string-match-p "qiulin15@mails.ucas.ac.cn" (mu4e-message-field msg :maildir))))

               :vars '((user-mail-address             . "qiulin15@mails.ucas.ac.cn")
                       (mu4e-sent-folder              . "/COREMAIL/Sent")
                       (mu4e-drafts-folder            . "/COREMAIL/Drafts")
                       (mu4e-trash-folder             . "/COREMAIL/Trash")
                       (mu4e-refile-folder            . "/COREMAIL/Refile")
                       (smtpmail-default-smtp-server  . "mail.cstnet.cn")
                       (smtpmail-smtp-server          . "mail.cstnet.cn")
                       (smtpmail-smtp-service         . 25)
                       (mu4e-get-mail-command         . "offlineimap")
                       (mu4e-maildir-shortcuts . (("/COREMAIL/INBOX"   . ?i)
                                                  ("/COREMAIL/Sent"    . ?s)
                                                  ("/COREMAIL/Refile"  . ?r)
                                                  ("/COREMAIL/Trash"   . ?t)
                                                  ("/COREMAIL/Drafts"  . ?d)))
                       (mu4e-bookmarks . ( ("maildir:/COREMAIL/INBOX AND flag:unread AND NOT flag:trashed"   "Unread messages"        ?u)
                                           ("maildir:/COREMAIL/INBOX AND date:today..now"                    "Today's messages"       ?t)
                                           ("maildir:/COREMAIL/INBOX AND date:7d..now"                       "Last 7 days"            ?w)
                                           ("maildir:/COREMAIL/INBOX AND date:1d..now"                       "Last 1 days"            ?o)
                                           ("maildir:/COREMAIL/INBOX"                                        "Inbox"                  ?i)
                                           ("maildir:/COREMAIL/Sent"                                         "Sent"                   ?s)
                                           ("maildir:/COREMAIL/Refile"                                       "Refile"                 ?r)
                                           ("maildir:/COREMAIL/Trash"                                        "Trash"                  ?t)
                                           ("maildir:/COREMAIL/Drafts"                                       "Drafts"                 ?d)
                                           ("maildir:/COREMAIL/INBOX AND mime:image/*"                       "Messages with images"   ?p)))
                       ))))

    ;; start with the first (default) context;
    ;; default is to ask-if-none (ask when there's no context yet, and none match)
    (setq mu4e-context-policy 'pick-first)


    ;; auto enable the org-mu4e-compose-org-mode when enter the mu4e-compose-mode
    (add-hook 'mu4e-compose-mode-hook
              (defun do-compose-stuff ()
                (org-mu4e-compose-org-mode)))

    (defun htmlize-and-send ()
      "When in an org-mu4e-compose-org-mode message, htmlize and send it."
      (interactive)
      (when (member 'org~mu4e-mime-switch-headers-or-body post-command-hook)
        (org-mime-htmlize)
        (message-send-and-exit)))

    (add-hook 'org-ctrl-c-ctrl-c-hook 'htmlize-and-send t)
    )
#+end_src
* programming
#+BEGIN_SRC emacs-lisp :tangle yes 
  (use-package company
    :config
    (global-company-mode t))

  (use-package flycheck
    :ensure t
    )

  (use-package yasnippet
    :config
    (use-package yasnippet-snippets)
    (yas-global-mode 1))

  (use-package smartparens
    :config
    (smartparens-global-mode)
    )

  (use-package highlight-parentheses
    :config
    (global-highlight-parentheses-mode t))

  (use-package magit)

  (use-package hungry-delete
    :config
    (global-hungry-delete-mode))

  (use-package exec-path-from-shell
    :config
    (when (memq window-system '(mac ns x))
      (exec-path-from-shell-initialize)))

  (use-package projectile
    :config
    (projectile-mode +1)
    (define-key projectile-mode-map (kbd "M-p") 'projectile-command-map))

  (use-package shell-pop
    :config
    (custom-set-variables
     '(shell-pop-shell-type (quote ("ansi-term" "*ansi-term*" (lambda nil (ansi-term shell-pop-term-shell)))))
     '(shell-pop-term-shell "/bin/zsh")
     '(shell-pop-universal-key "C-c t")
     '(shell-pop-window-size 30)
     '(shell-pop-full-span t)
     '(shell-pop-window-position "bottom")
     '(shell-pop-autocd-to-working-dir t)
     '(shell-pop-restore-window-configuration t)
     '(shell-pop-cleanup-buffer-at-process-exit t)))


    (use-package lsp-mode
      :init
      (setq lsp-prefer-flymake nil)
      (setq lsp-keymap-prefix "C-c l")
      :config
      (add-hook 'julia-mode-hook #'lsp-mode))
    (use-package lsp-ui :commands lsp-ui-mode)
    ;; if you are ivy user
    (use-package lsp-ivy :commands lsp-ivy-workspace-symbol)
#+END_SRC
* lang
** c++
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package irony
    :config
    (add-hook 'c++-mode-hook 'irony-mode)
    (add-hook 'c-mode-hook 'irony-mode)
    (add-hook 'c++-mode-hook 'flycheck-mode)
    (add-hook 'c-mode-hook 'flycheck-mode)
    (add-hook 'objc-mode-hook 'irony-mode)

    (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options))

  (use-package clang-format+
    :config
    (add-hook 'c-mode-common-hook #'clang-format+-mode))
#+END_SRC
** python
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package elpy
    :ensure t
    :defer t
    :init
    (advice-add 'python-mode :before 'elpy-enable)
    :config
    (add-hook 'python-mode 'flycheck-mode)
    (setq python-shell-interpreter "python3"
          python-shell-interpreter-args "-i")
    (setq elpy-rpc-python-command "python3"))


  (use-package yapfify
    :config
    (add-hook 'python-mode-hook 'yapf-mode))
#+END_SRC
** latex
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package tex
    :ensure auctex)

  (add-hook 'LaTeX-mode-hook 
            (lambda()
              (add-to-list 'TeX-command-list '("XeLaTeX" "%`xelatex%(mode)%' %t" TeX-run-TeX nil t))
              (setq TeX-command-default "XeLaTeX")))

  (add-hook 'LaTeX-mode-hook 
            (lambda()
              (add-to-list 'TeX-command-list '("LuaLaTex" "%`lualatex%(mode)%' %t" TeX-run-TeX nil t))
              ))
#+END_SRC
** julia
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package julia-mode
    :ensure flycheck-julia
    :config
    ;; tell flycheck about the julia linter
    (flycheck-julia-setup)
    );; Load ob-ess-julia and dependencies

  (use-package julia-repl
    :config
    (add-hook 'julia-mode-hook 'julia-repl-mode))

  (use-package lsp-julia
    :config
    (setq lsp-julia-default-environment "~/.julia/environments/v1.8/"))
#+END_SRC
** misc
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package markdown-mode
    :ensure t
    :commands (markdown-mode gfm-mode)
    :mode (("README\\.md\\'" . gfm-mode)
           ("\\.md\\'" . markdown-mode)
           ("\\.markdown\\'" . markdown-mode))
    )

  (use-package yaml-mode
    :config
    (add-to-list 'auto-mode-alist '("\\.yml\\'" . yaml-mode))
    (add-hook 'yaml-mode-hook
              '(lambda ()
                 (define-key yaml-mode-map "\C-m" 'newline-and-indent)))
    )
#+END_SRC
* org
** basic
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package org-superstar
    :config
    (add-hook 'org-mode-hook (lambda () (org-superstar-mode 1))))

  (with-eval-after-load 'org       
    (setq org-startup-indented t) ; Enable `org-indent-mode' by default
    (add-hook 'org-mode-hook #'visual-line-mode))

  (setq org-babel-python-command "python3")
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . nil)
     (python . t)))
#+END_SRC
** exporting
#+BEGIN_SRC emacs-lisp :tangle yes 
  (use-package org-ref
    :config
    (setq org-latex-pdf-process 
          '("xelatex -shell-escape -interaction nonstopmode %f"
            "xelatex -shell-escape -interaction nonstopmode %f")) ;; for multiple passes
    ;; (setq org-latex-pdf-process
    ;;       '("xelatex -interaction nonstopmode -output-directory %o %f"
    ;;         "bibtex %b"
    ;;         "xelatex -interaction nonstopmode -output-directory %o %f"
    ;;         "xelatex -interaction nonstopmode -output-directory %o %f"))

    ;; (setq org-latex-listings 'minted
    ;;       org-latex-packages-alist '(("" "minted")))

    ;; (setq org-latex-pdf-process
    ;;       '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
    ;;         "bibtex %b"
    ;;         "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
    ;;         "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))
    (define-key org-mode-map (kbd "C-c ]") 'org-ref-insert-link)
    )
#+END_SRC
** misc
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package org-re-reveal
    :config
    (setq org-re-reveal-root "file:///Users/qiulin/.emacs.d/misc/reveal.js"))
#+END_SRC
* customization
#+BEGIN_SRC emacs-lisp :tangle yes
  (defun ql/reload-config ()
    (interactive)
    (org-babel-load-file "~/.emacs.d/config.org"))
#+END_SRC
